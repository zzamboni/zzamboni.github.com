<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | zzamboni.org]]></title>
  <link href="http://zzamboni.github.com/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://zzamboni.github.com/"/>
  <updated>2013-09-16T19:42:59-05:00</updated>
  <id>http://zzamboni.github.com/</id>
  <author>
    <name><![CDATA[Diego Zamboni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HowTo: Changing the available display formats for Evernote's "Insert Date" command]]></title>
    <link href="http://zzamboni.github.com/blog/howto-changing-the-available-display-formats"/>
    <updated>2012-11-13T23:00:30-06:00</updated>
    <id>http://zzamboni.github.com/blog/howto-changing-the-available-display-formats</id>
    <content type="html"><![CDATA[<p>Evernote introduced some time ago an "Insert Date" keyboard shortcut, which is very handy. However, the options for the format of the inserted date seemed limited (only four options). I finally learned how this works, and how to change it on the Mac. The formats offered are those that are configured in the "Languages &amp; Text" preferences panel. If you go to "Region" and then click the "Customize button" in the Dates part of the panel, you will see and be able to customize the formats for short, medium, long and full date representations. Those are the options that are offered to you by Evernote. Just change them to whatever you want, and they will be available for selection. What I specifically wanted to do was to use the YYYY-MM-DD format, so I changed it to the following:<p></p></p>

<div>
<div class="p_embed p_image_embed">
<a href="http://zzamboni.github.com/images/2012/11/13/howto-changing-the-available-display-formats/45777298-System%20Preferences.jpg"><img alt="System_preferences" height="412" src="http://zzamboni.github.com/images/2012/11/13/howto-changing-the-available-display-formats/45777298-System%20Preferences.jpg" width="500"></a>
</div>
</div>


<p></p>


<div>I had to restart Evernote for it to recognize the change, but afterward the new formats were available.</div>


<p></p>


<div>Tip of the hat to Martin Maiers in the Evernote forums, who explained this technique: <a href="http://discussion.evernote.com/topic/29812-insert-date-formats-please-add-iso-8601/#entry160872">http://discussion.evernote.com/topic/29812-insert-date-formats-please-add-iso-8601/#entry160872</a>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing cfengine on Mac OS X]]></title>
    <link href="http://zzamboni.github.com/blog/installing-cfengine-320b3-on-mac-os-x-107"/>
    <updated>2011-08-05T02:31:00-05:00</updated>
    <id>http://zzamboni.github.com/blog/installing-cfengine-320b3-on-mac-os-x-107</id>
    <content type="html"><![CDATA[<p><a href="http://cfengine.com/">Cfengine</a> (tested 3.2.0) installs easily on OS X (tested 10.7), given that it's Unix. One problem I encountered was that it does not compile with the bundled version of Berkeley DB (it recognizes it during configure, but produces compilation errors). The solution is to use some other DB engine. I chose Tokyo Cabinet. Using <a href="http://mxcl.github.com/homebrew/">homebrew</a>, the process is simple</p>


<p><code>brew install tokyo-cabinet</code></p>


<p>After this, configure --with-tokyocabinet, and then compile and install as usual.</p>


<p>I have submitted a <a href="https://github.com/mxcl/homebrew/pull/6835/files">homebrew formula for cfengine</a>. Once/if it gets approved, you should be able to run <code>brew install cfengine</code> to do all of the above automatically.</p>


<p><strong>Update (2011/09/03): The cfengine homebrew formula has been accepted into the repository! You can now simply run "brew update; brew install cfengine" to get cfengine 3.2.0 installed.</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatically creating tasks from email in Outlook]]></title>
    <link href="http://zzamboni.github.com/blog/automatically-creating-tasks-from-email-in-ou"/>
    <updated>2011-03-16T01:54:00-06:00</updated>
    <id>http://zzamboni.github.com/blog/automatically-creating-tasks-from-email-in-ou</id>
    <content type="html"><![CDATA[<p><span style="font-size: x-small;"><em><strong>Please note:</strong> I am no longer using Windows nor Outlook, so unfortunately I cannot offer any help with problems you encounter using these scripts and techniques.</em></span></p>


<p>Over the last few days I have been redoing my GTD-under-Outlook setup, based on the instructions available in the "<a href="https://secure.davidco.com/store/product.php?productid=16426&amp;cat=0&amp;page=1">GTD and Outlook</a>" guide from DavidCo (I will write more about my setup later). One of the tricks the guide suggest is creating a mail rule on outgoing mail, which scans the message body for a special tag (/wf or *wf* are suggested) and automatically adds the message to the @WAITING FOR email folder. </p>


<p></p>


<p> This is a very nice idea, and I am a fan of automating things as much as possible, so it really strikes a cord with me. Unfortunately, I am not using a @WAITING FOR email folder, instead I have just my @WAITING FOR task category. As strange as it sounds, Outlook does not have an email filter rule for automatically creating a task from an outgoing or incoming email message. For incoming messages there is a rule for flagging the message for "Follow up", which creates a "to do" item but not a Task in itself (this is very confusing). This would be fine except that Follow-Up items are not synchronized to <a href="http://toodledo.com/">Toodledo</a> by the <a href="http://www.chromadrake.com/ChromaticDragon/software/ToodledoSyncInfo.aspx">ToodleDoSync application</a>, and hence not synchronized to my iPhone. <p></p> So, evidently I had to solve this, and here is how I did it. <p></p> I noticed that there is an email action for "running a script". It turns out the "script" <a href="http://support.microsoft.com/kb/306108">must be a subroutine written in VisualBasic for Applications</a> (VBA) from inside Outlook. A Google search for "<a href="http://www.google.com/search?sourceid=chrome&amp;ie=UTF-8&amp;q=outlook+automatically+create+task+from+email">outlook create task from email</a>" yielded a few good hits, including <a href="http://www.outlookcode.com/codedetail.aspx?id=959">this one</a>. It does pretty much what I want, except that the text and attachments of the message are copied into the task body, which I don't like because (1) most formatting from the original email is lost, and (2) in my testing, some messages with attachments produced VBA errors. So I modified it to just attach a copy of the original message into the task, which preserves both its formatting and attachments identically. I made the rule it so that the tasks are created based on incoming mail because <a href="http://blog.zzamboni.org/automatically-cc-myself-in-outlook">I copy myself automatically on all messages I send</a> (in fact I have disabled saving messages to the "Sent Items" folder), and this makes it possible to create tasks by emailing my Exchange account from other locations.</p>

<p>As a bonus, I modified the script so that any text you type after the /wf tag becomes the title of the newly-created task (if you don't type anything, the subject of the email message is used). This makes it easier to give your @WAITING FOR items a good, descriptive title upfront.</p>


<p>So here are the detailed steps of what you need to do: </p>


<p></p>


<p> (these instructions are based on Outlook 2010 which is what I use, if you use 2007 or prior you'll have to find by yourself where the different options and menus are, which shouldn't be all that difficult) <p></p></p>

<ol>
<li>In the Developer tab, click on "Visual Basic", which opens the VBA development environment, and unless you already have other macros installed, should give you a blank window. <br><div class="p_embed p_image_embed">
<img alt="Vba" height="126" src="http://zzamboni.github.com/images/2011/03/16/automatically-creating-tasks-from-email-in-ou/23077308-vba.png" width="422">
</div>
</li>
<li>Paste the code:<br><div><script src='https://gist.github.com/868510.js?file=outlook_MakeWaitingForTaskWithAttachmentFromCurrentMessage.bas'></script>
<noscript><pre><code>' How to use it: see http://blog.zzamboni.org/automatically-creating-tasks-from-email-in-ou
' Diego Zamboni, March 16, 2011

' Set the string comparison method to Text (&quot;AAA&quot; = &quot;aaa&quot;).
Option Compare Text

' Based originally on code from http://www.outlookcode.com/codedetail.aspx?id=959, modified by Diego Zamboni
Sub MakeWaitingForTaskWithAttachmentFromCurrentMessage(MyMail As Outlook.MailItem)
    Dim strID As String
    Dim olNS As Outlook.NameSpace
    Dim olMail As Outlook.MailItem
    Dim objTask As Outlook.TaskItem
    Dim categories As String
    Dim addRecipient As Boolean
    Dim regex
    Dim matches, customSubject, subject
    
    ' Configuration options
    categories = &quot;@WAITING FOR&quot;
    addRecipient = True
    
    strID = MyMail.EntryID
    Set olNS = Application.GetNamespace(&quot;MAPI&quot;)
    Set olMail = olNS.GetItemFromID(strID)
    Set objTask = Application.CreateItem(olTaskItem)
    objTask.Attachments.Add MyMail
    Set regex = CreateObject(&quot;vbscript.regexp&quot;)
    regex.Pattern = &quot;/wf (.*)&quot;
    regex.IgnoreCase = True
    regex.Global = True
    Set matches = regex.Execute(olMail.Body)
    If matches.Count &lt;&gt; 0 Then
        customSubject = matches(0).submatches(0)
    Else
        customSubject = &quot;&quot;
    End If
    If customSubject &lt;&gt; &quot;&quot; Then
        subject = customSubject
    Else
        subject = olMail.subject
    End If
    
    With objTask
        If addRecipient Then
            .subject = olMail.Recipients.Item(1) &amp; &quot;: &quot; &amp; subject
        Else
            .subject = subject
        End If
        .categories = categories
        .Body = olMail.Body
    End With
    objTask.Save
     
    Set objTask = Nothing
    Set olMail = Nothing
    Set olNS = Nothing
End Sub

' Wrapper that gets the current item and calls the previous function, to use as a macro
Sub MakeWaitingForTaskWithAttachmentFromCurrentMessageMacro()
    Dim curMail As Outlook.MailItem
    Set curMail = GetCurrentItem()
    Call MakeWaitingForTaskWithAttachmentFromCurrentMessage(curMail)
End Sub

    
' From http://www.outlookcode.com/codedetail.aspx?id=50
Function GetCurrentItem() As Object
    Dim objApp As Outlook.Application
         
    Set objApp = CreateObject(&quot;Outlook.Application&quot;)
    On Error Resume Next
    Select Case TypeName(objApp.ActiveWindow)
        Case &quot;Explorer&quot;
            Set GetCurrentItem = objApp.ActiveExplorer.Selection.Item(1)
        Case &quot;Inspector&quot;
            Set GetCurrentItem = objApp.ActiveInspector.CurrentItem
        Case Else
            ' anything else will result in an error, which is
            ' why we have the error handler above
    End Select
     
    Set objApp = Nothing
End Function
</code></pre></noscript></div>
</li>
<li>The code includes both the "script" to use in an email rule (which receives the email message as argument) and a macro (without arguments) so that you can run it manually from the Macros menu (also in the Developer tab). Try it out - select an email message, choose the macro from the Macros menu, and check that a new task in the @WAITING FOR category is created, with the original message as an attachment. </li>
<li>If needed, modify the category to which the task is assigned (or leave it empty to create an uncategorized task). </li>
<li>The code by default adds the recipient of the message to the beginning of the task title, separated by a colon (of the form "recipient: subject"). This makes it easier to see pending items per person (and, if you use the 2Do iPhone app, it automatically groups entries by the text before the colon, which makes it even easier to process. If you don't want this, modify the value of addRecipient to "False".</li>
<li>To ensure that the macros run correctly after restarting Outlook, you have to sign it digitally, following the instructions here: <a href="http://office.microsoft.com/en-us/outlook-help/digitally-sign-a-macro-project-HA001231781.aspx">http://office.microsoft.com/en-us/outlook-help/digitally-sign-a-macro-project...</a>. Create a self-signed certificate and use it for signing the macro package. I had to restart Outlook for the digital signature to take proper effect. </li>
<li>Create the rule that will invoke the new subroutine on appropriate incoming email message(to create a new rule open the Home tab, then the Rules menu, then "Manage Rules and Alerts", create a blank rule for incoming messages, choose the appropriate criteria, and click on the underlined parts to define the parameters). These are the criteria I used: my rule operates on incoming mail from any of my accounts (so that only I can create Waiting For tasks for myself) and that contains "/wf" or "/*wf*/" in the body (in practice I always use /wf). I choose to automatically move the message to a local Outlook file (I have a pretty restrictive server quota), but you may want to skip this step. I also mark the message as read automatically, and of course I invoke the script created in the previous steps. <div class="p_embed p_image_embed">
<a href="http://zzamboni.github.com/images/2011/03/16/automatically-creating-tasks-from-email-in-ou/23077311-rule.png"><img alt="Rule" height="123" src="http://zzamboni.github.com/images/2011/03/16/automatically-creating-tasks-from-email-in-ou/23077311-rule.png" width="500"></a>
</div>
</li>
<li>Test it out. Send a message to yourself that contains /wf in the body. What I do in practice is that I include the /wf at the end of the message, and make it 1-point font and white so it's invisible to most people, but still detectable by the filter. After the message arrives you should see the new task appear in the appropriate category, containing the original message as an attachment. If you want to give the task a custom title instead of using the email subject, type it after the /wf, like this: "/wf Response about foo bar". The email recipient will still be added when you specify a custom title, unless you have disabled it in the code (see step 5).</li>
</ol>


<p>Of course, when using this to flag messages sent to other people, you need to make sure you either automatically cc yourself (if you have created the rule on incoming mail), or that you create it on outgoing mail. I have not tested this case, but the "run a script" option is there as well for outgoing messages, so I don't see a reason why it should not work. </p>


<p></p>


<p> Have fun.</p>

<p> </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making cygwin, Windows and emacs understand the same symlinks]]></title>
    <link href="http://zzamboni.github.com/blog/making-cygwin-windows-and-emacs-understand-th"/>
    <updated>2010-09-28T09:39:00-05:00</updated>
    <id>http://zzamboni.github.com/blog/making-cygwin-windows-and-emacs-understand-th</id>
    <content type="html"><![CDATA[<p>Today I ran into the problem that symlinks created under cygwin using "ln -s" are not understood by Windows, and of course Windows shortcuts are seen by cygwin as regular files. Happily, this is a <strong>(semi-)</strong>solved problem. For reference, this is what needs to be done:</p>


<p></p>


<p></p>

<ol>
<li>Add "<a href="http://www.cygwin.com/cygwin-ug-net/using-effectively.html#using-shortcuts">winsymlinks</a>" to your CYGWIN environment variable. For example, in my .bashrc I have the following:<p></p>  <tt>export CYGWIN="nodosfilewarning winsymlinks"<br></tt><br> This makes cygwin create symlinks differently, in a form that is understood both by it and by Windows.<br> This is the main step, and the only one if you just need access from the shell and from the Windows explorer. However, emacs still sees those symlinks as regular .lnk files. To fix this, follow the next step.<p></p>  </li>
<li>Install the <a href="http://centaur.maths.qmw.ac.uk/emacs/files/w32-symlinks.el">w32-symlinks.el </a>package, and add the following to your .emacs file:<p></p>  <tt>(require 'w32-symlinks)</tt><p></p>  </li>
<li>Run <tt>M-x customize-option</tt> and enter <tt>w32-symlinks-handle-shortcuts </tt>as the variable to customize. Turn it on, save it for future sessions, and you are all set. The new symlinks should be properly understood by the cygwin shell, Windows explorer, and emacs. Of course, you will have to re-create any symlinks or shortcuts that you created prior to setting the winsymlinks option, for them to be created in the new format.<p></p>
<strong>Update: </strong>so this doesn't quite work on my system. I am using Emacs 23.1, and apparently w32-symlinks does not work properly in this version. If you have an older version (I hear Emacs 21 works well), then this might work for you. </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storing CFEngine configuration in CVS]]></title>
    <link href="http://zzamboni.github.com/blog/storing-cfengine-configuration-in-cvs"/>
    <updated>2010-09-07T14:17:00-05:00</updated>
    <id>http://zzamboni.github.com/blog/storing-cfengine-configuration-in-cvs</id>
    <content type="html"><![CDATA[<div class="posterous_bookmarklet_entry">
      <div class="p_embed p_image_embed">
<img alt="Media_httpsialorghowt_daqnn" height="445" src="http://zzamboni.github.com/images/2010/09/07/storing-cfengine-configuration-in-cvs/14738702-media_httpsialorghowt_DAqnn.png" width="464">
</div>


<div class="posterous_quote_citation">via <a href="http://sial.org/howto/cfengine/repository/">sial.org</a>
</div>
    <p>Useful article about storing both development and production configurations of cfengine using a version control mechanism. I am in the process of developing a similar setup using git, I will share it here when I get it to work properly.</p>
</div>

]]></content>
  </entry>
  
</feed>
